<?php


/**
 * Default cache time
 */
define('facebook_medtronic_CACHETIME', 1200);


/**
 * Implementation of hook_init().
 */
function facebook_medtronic_init() {
  drupal_add_css(drupal_get_path('module', 'facebook_medtronic') . '/facebook_medtronic.css');
}


/**
 * Implementation of hook_theme().
 */
function facebook_medtronic_theme($existing, $type, $theme, $path) {
  $theme = array(
    'facebook_medtronic_feed' => array(
      'variables' => array('items' => array()),
      'template'  => 'facebook_medtronic-feed',
    ),
  );
  return $theme;
}


/**
 * Implementation of hook_perm().
 */

function facebook_medtronic_permission() {
  return array(
    'administer facebook pull' => array(
      'title' => t('Administer facebook pull'),
    ),
  );
}


/**
 * Implementation of hook_menu().
 */
function facebook_medtronic_menu() {
  $items = array();

  $items['admin/config/services/facebook-pull'] = array(
    'title' => 'Facebook pull',
    'description' => 'Set Facebook API details for facebook blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_medtronic_settings'),
    'access arguments' => array('administer facebook pull'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implementation of hook_block_list().
 */
function facebook_medtronic_block_info() {
  $blocks = array();

  $blocks['facebook_medtronic_default'] = array(
    'info' => t('Facebook stream'),
    'weight' => 0,
    'status' => 0,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}


/**
 * Implementation of hook_block_view().
 */
function facebook_medtronic_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'facebook_medtronic_default':
      $block = array(
        'subject' => t('Facebook stream'),
        'content' => _facebook_medtronic_render_block(),
      );
      break;
  }

  return $block;
}



/**
 * Form: Administration page settings.
 */
function facebook_medtronic_settings($form_state) {
  $form = array();

  $application_id = l(t('Application ID'), 'https://developers.facebook.com/apps');
  $form['facebook_medtronic_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('App ID'),
    '#default_value' => t(variable_get('facebook_medtronic_app_id', '')),
    '#description' => t('Unique !application_id for your facebook app.', array('!application_id' => $application_id)),
  );

  $form['facebook_medtronic_app_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('App Secret'),
    '#default_value' => t(variable_get('facebook_medtronic_app_secret', '')),
    '#description' => t('Your sites app secret.'),
  );

  $graph_link = l(t('Graph ID'), 'http://developers.facebook.com/docs/reference/api/');
	
  $form['facebook_medtronic_graph_id_en'] = array(
    '#type' => 'textfield',
    '#title' => t('Graph ID for EN'),
    '#default_value' => t(variable_get('facebook_medtronic_graph_id_en', '')),
    '#description' => t('The !graph_id for En', array('!graph_id' => $graph_link)),
  );
	$form['facebook_medtronic_graph_id_th'] = array(
    '#type' => 'textfield',
    '#title' => t('Graph ID for TH'),
    '#default_value' => t(variable_get('facebook_medtronic_graph_id_th', '')),
    '#description' => t('The !graph_id for TH', array('!graph_id' => $graph_link)),
  );

  $form['facebook_medtronic_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('How many pictures show?'),
    '#size' => 5,
    '#default_value' => t(variable_get('facebook_medtronic_limit', 9)),
    '#description' => t('How many posts to show in the box by default'),
  );
	$form['facebook_medtronic_limit_download'] = array(
    '#type' => 'textfield',
    '#title' => t('How many posts download?'),
    '#size' => 5,
    '#default_value' => t(variable_get('facebook_medtronic_limit_download', 20)),
    '#description' => t('Not all posts have a photo, so it must more then pictures show'),
  );

  return system_settings_form($form);
}


/**
 * Serve up a facebook feed from the cache
 */
function facebook_medtronic_render($graph_id, $type, $app_id, $app_secret, $options = array()) {
  $data = _facebook_medtronic_feed_cached($graph_id, $type, $app_id, $app_secret, $options);
  if (!$data) {
    return '';
  }
  return theme('facebook_medtronic_feed', array('items' => $data));
}



/**
 * Pull data from a facebook feed and cache it
 */
function _facebook_medtronic_feed_cached($graph_id, $type, $app_id, $app_secret, $options = array()) {
  $cache_key = sprintf("%s-%s-%s", $graph_id, $type, http_build_query($options, '', '-'));
  $cache = cache_get($cache_key);

  if (!$cache || $cache->created + facebook_medtronic_CACHETIME < REQUEST_TIME || empty($cache->data)) {
    $token = _facebook_medtronic_accesstoken($app_id, $app_secret);
    $data = _facebook_medtronic_feed($graph_id, $type, $token, $options);
		
    cache_set($cache_key, $data, 'cache', CACHE_TEMPORARY);


  } else {
    $data = $cache->data;

  }

  return $data;
}


/**
 * Pull data from a facebook feed
 */
function _facebook_medtronic_feed($graph_id, $type, $token, $options = array()) {
  $qs = http_build_query($options, '', '&');
  $url = "https://graph.facebook.com/%s/%s?%s&%s";
  $fullurl = sprintf($url, $graph_id, $type, $token, $qs);
  $raw = drupal_http_request($fullurl);
  $raw = $raw->data;
  $data = json_decode($raw);
  if (!isset($data->data)) {
    $message = 'Failed to fetch data from the Facebook Graph';
    $variables = array();
    watchdog('facebook_medtronic', $message, $variables, WATCHDOG_WARNING);
    return FALSE;
  }
	global $is_https;
	
	foreach ($data->data as $id=>&$item) {
		$url = "https://graph.facebook.com/%s";
		$fullurl = sprintf($url,$item->id);
		$raw = drupal_http_request($fullurl);
		$item->source = json_decode($raw->data);

		if (!isset($item->source->picture) || !isset($item->source->object_id) || (isset($item->source->type) && $item->source->type == 'event')) {unset($data->data[$id]);} else {
			/*if (isset($item->source->story)) {unset($data->data[$id]);}*/
			$ids = explode("_", $item->id);
			$post_id = $ids[1];
			$scheme = $is_https ? 'https' : 'http';
			if (isset($item->source->object_id)) {
				$pic_id = $item->source->object_id;
				$item->picture = "$scheme://graph.facebook.com/$pic_id/picture";}
			else{$item->picture = "$scheme://graph.facebook.com/$post_id/picture";}
			$item->link = "$scheme://www.facebook.com/$item->id";
			/*if (!@fopen($item->picture,'r')){
				$item->picture = $item->source->picture;
			}*/
		}
	}
	
	//drupal_set_message(print_r($data->data,true));
  return $data->data;
}


/**
 * Get an access token
 */
function _facebook_medtronic_accesstoken($app_id, $app_secret) {
  $endpoint = 'https://graph.facebook.com/oauth/access_token?client_id=%s&client_secret=%s&grant_type=client_credentials';

  $fullurl = sprintf($endpoint, $app_id, $app_secret);
  $token = drupal_http_request($fullurl);
  $token = $token->data;
  if (!$token) {
    $message = 'Failed to fetch data from the Facebook Graph';
    $variables = array();
    watchdog('facebook_medtronic', $message, $variables, WATCHDOG_WARNING);
    return FALSE;
  }

  return $token;
}

/**
 * Render a single block using the configured settings.
 */
function _facebook_medtronic_render_block() {
  $app_id = variable_get('facebook_medtronic_app_id', '');
  $app_secret = variable_get('facebook_medtronic_app_secret', '');
  $graph_id_en = variable_get('facebook_medtronic_graph_id_en', '');
	$graph_id_th = variable_get('facebook_medtronic_graph_id_th', '');
  $type = 'posts';
  $limit = variable_get('facebook_medtronic_limit_download', '');

	switch ($GLOBALS['language']->language) {
	case 'th':
			return facebook_medtronic_render($graph_id_th, $type, $app_id, $app_secret, $options = array('limit' => $limit));
			break;
	default:
			return facebook_medtronic_render($graph_id_en, $type, $app_id, $app_secret, $options = array('limit' => $limit));
	}
}


/**
 * Implements hook_preprocess_HOOK();
 */
function facebook_medtronic_preprocess_facebook_medtronic_feed(&$variables) {
  switch ($GLOBALS['language']->language) {
	case 'th':
			 $variables['feed_id'] = variable_get('facebook_medtronic_graph_id_th', '');
			break;
	default:
			 $variables['feed_id'] = variable_get('facebook_medtronic_graph_id_en', '');
	}
	/*drupal_set_message(print_r($variables['items'],true));*/
}